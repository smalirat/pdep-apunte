import tierra.*

object guerrero {
  var property tienePocaVida = false
  var property poder = 0
  
  method poder() = poder
}

const caminoLebennin = new Camino(zonas = [lebennin], castigos = [])

const caminoLossarnach = new Camino(zonas = [lossarnach], castigos = [])

const caminoMinasTirith = new Camino(zonas = [minasTirith], castigos = [])

const caminoBosqueDeFangorn = new Camino(
  zonas = [bosqueDeFangorn],
  castigos = []
)

describe "Test de báculo " {
  test "un báculo para un guerrero con mucha vida " {
    assert.equals(250, baculo.poderOtorga(guerrero))
  }
  
  test "un báculo para un guerrero con poca vida tiene tope " {
    guerrero.tienePocaVida(true)
    assert.equals(400, baculo.poderOtorga(guerrero))
  }
  
  test "un báculo de poder base 100 para un guerrero con poca vida" {
    guerrero.tienePocaVida(true)
    baculo.poderBase(100)
    assert.equals(200, baculo.poderOtorga(guerrero))
  }
}

describe "Test flecha" {
  method asignarFechaDeUso(dia, mes, anio) {
    flechaDeBronce.fechaLustrado(new Date(day = 1, month = 1, year = 2024))
    const calendarioTest = object {
      method today() = new Date(day = dia, month = mes, year = anio)
    }
    
    flechaDeBronce.fechaDeUso(calendarioTest)
  }
  
  test "fecha de bronce lustrada el 01/01/2024 y usada el 05/01/2024" {
    self.asignarFechaDeUso(5, 1, 2024)
    assert.equals(96, flechaDeBronce.poderOtorga(guerrero))
  }
  
  test "fecha de bronce lustrada el 01/01/2024 y usada el 05/09/2024" {
    self.asignarFechaDeUso(5, 9, 2024)
    assert.equals(0, flechaDeBronce.poderOtorga(guerrero))
  }
  
  test "flecha de aluminio " {
    assert.equals(50, flechaDeAluminio.poderOtorga(guerrero))
  }
  
  test "flecha de hierro sin oxidar" {
    flechaDeHierro.oxidada(false)
    assert.equals(70, flechaDeHierro.poderOtorga(guerrero))
  }
  
  test "flecha de hierro oxidada" {
    flechaDeHierro.oxidada(true)
    assert.equals(35, flechaDeHierro.poderOtorga(guerrero))
  }
  
  test "caja de flechas negras" {
    self.asignarFechaDeUso(5, 1, 2024)
    flechaDeHierro.oxidada(false)
    cajadeFlechasNegra.flechas(
      #{flechaDeBronce, flechaDeAluminio, flechaDeHierro}
    )
    assert.equals(83, cajadeFlechasNegra.poderOtorga(guerrero))
  }
}

describe "test Gandalf" {
  method asignarFlechas() {
    flechaDeAluminio.poder(100)
    flechaDeHierro.oxidada(false)
    flechaDeHierro.poder(150)
    gandalf.armas(#{flechaDeAluminio, flechaDeHierro})
  }
  
  test "El poder de gandalf con vida 100 y un arma de poder 100 más otra de 150" {
    self.asignarFlechas()
    assert.equals(2000, gandalf.poder())
  }
  
  test "El poder de gandalf con vida 5  y un arma de poder 100 más otra de 150" {
    self.asignarFlechas()
    gandalf.nivelDeVida(5)
    assert.equals(1500, gandalf.poder())
  }
}

describe "test Lebennin" {
  test "Un guerrero con poder 3000 puede pasar por Lebennin" {
    guerrero.poder(3000)
    assert.that(caminoLebennin.puedeSerAtravesadoPor(guerrero))
  }
  
  test "Un guerrero con poder 100 puede pasar por Lebennin" {
    guerrero.poder(100)
    assert.notThat(caminoLebennin.puedeSerAtravesadoPor(guerrero))
  }
  
  test "gandalf pasa por Lebennin" {
    caminoLebennin.puedeSerAtravesadoPor(gandalf)
    assert.equals(100, gandalf.nivelDeVida())
  }
}

describe "test minas Tirith" {
  test "Un personaje armado puede pasar por Minas Tirith" {
    //gandalf.armas(#{espada})
    assert.equals(true, caminoMinasTirith.puedeSerAtravesadoPor(gandalf))
  }
  
  test "Un personaje desarmado no puede pasar por Minas Tirith" {
    gandalf.armas(#{})
    assert.equals(false, caminoMinasTirith.puedeSerAtravesadoPor(gandalf))
  }
  
  test "Gandalf de 100 unidades de vida con el baculo y la espada pasa por Minas Tirith" {
    //gandalf.armas(#{baculo, espada})
    caminoMinasTirith.atravesarCamino(gandalf)
    assert.equals(80, gandalf.nivelDeVida())
  }
}

describe "test Lossarnach" {
  test "Gandalf puede pasar por Lossach" {
    assert.equals(true, caminoLossarnach.puedeSerAtravesadoPor(gandalf))
  }
  
  test "Gandalf de 100 unidades de vida con el baculo y la espada pasa por Lossarnach" {
    //gandalf.armas(#{baculo, espada})
    caminoLossarnach.atravesarCamino(gandalf)
    assert.equals(104, gandalf.nivelDeVida())
  }
}

describe "test Gondor" {
  test "Un guerrero bien equipado, puede pasar por Gondor" {
    //gandalf.armas(#{baculo, espada})
    //assert.equals(true, gondor.puedeSerAtravesadoPor(gandalf))
    assert.that(gondor.puedeSerAtravesadoPor(gandalf))
  }
  
  test "Un guerrero bien equipado, atraviesa Gondor" {
    //gandalf.armas( #{baculo, new Espada(multiplicadorDePoder = 10, magia = magiaElfica)})
    gondor.atravesarCamino(gandalf)
    assert.equals(60, gandalf.nivelDeVida())
  }
}

describe "test Tom" {
  test "tom puede atravesar Lebennin" {
    assert.that(caminoLebennin.puedeSerAtravesadoPor(tom))
  }
  
  test "Tom atraviesa el camino que pasa por Gondor antes mencionado" {
    gondor.atravesarCamino(tom)
    assert.equals(100, tom.nivelDeVida())
  }
}

describe "test Espada" {
  test "Poder de una espada élfica para cualquier guerrero" {
    const espada = new Espada(multiplicadorDePoder = 10, magia = magiaElfica)
    assert.equals(250, espada.poderOtorga(guerrero))
  }
  
  test "Poder de una espada enana para un guerrero" {
    const espada = new Espada(multiplicadorDePoder = 10, magia = magiaEnana)
    assert.equals(500, espada.poderOtorga(gandalf))
  }
  
  test "Poder de una espada humana para un guerrero" {
    const espada = new Espada(
      multiplicadorDePoder = 10,
      magia = new MagiaHumana(fraccionDeVida = 60)
    )
    assert.equals(600, espada.poderOtorga(gandalf))
  }
}

describe "test Daga" {
  test "Poder de una daga élfica" {
    const daga = new Daga(multiplicadorDePoder = 10, magia = magiaElfica)
    assert.equals(125, daga.poderOtorga(frodo))
  }
}

describe "Test Arco" {
  test "Poder de un arco" {
    const arco = new Arco(largo = 10)
    assert.equals(40, arco.poderOtorga(guerrero))
  }
}

describe "Test ballesta" {
  const ballesta = new Ballesta(largo = 20)
  const nuevoGuerrero = new Guerrero(
    nivelDeVida = 100,
    raza = maiar,
    armas = #{
      ballesta,
      new Arco(largo = 18),
      new Daga(multiplicadorDePoder = 10, magia = magiaElfica),
      new Hacha(valorFijo = 10, madera = ruberoica),
      new Hacha(valorFijo = 10, madera = nolan)
    }
  )
  
  test "Poder de una ballesta con varias armas" {
    assert.equals(96, ballesta.poderOtorga(nuevoGuerrero))
  }
  
  test "poder de una ballesta con menos armas" {
    nuevoGuerrero.armas(
      #{
        ballesta,
        new Arco(largo = 18),
        new Daga(multiplicadorDePoder = 10, magia = magiaElfica)
      }
    )
    assert.equals(88, ballesta.poderOtorga(nuevoGuerrero))
  }
}

describe "test hacha" {
  test "Poder de un hacha de madera ruberoica" {
    const hacha = new Hacha(valorFijo = 10, madera = ruberoica)
    // Ajustamos el poder del mango con 50% de porcentaje
    ruberoica.porcentaje(50)
    assert.equals(15, hacha.poderOtorga(guerrero))
    // Verificamos que el poder total del hacha sea 15
  }
  
  test "Poder de un hacha de madera nolan" {
    // Ajustamos el poder del mango fijo de Nolan
    const hacha = new Hacha(valorFijo = 10, madera = nolan)
    assert.equals(45, hacha.poderOtorga(guerrero))
    // Comprobamos que el poder total es 45
  }
  
  test "Poder de un hacha de madera Luduenica" {
    const hacha = new Hacha(valorFijo = 10, madera = luduenico)
    ruberoica.porcentaje(50) // Ajustamos el poder del mango
    assert.equals(25, hacha.poderOtorga(guerrero))
    // Comprobamos que el poder total es 25
  }
}

describe "test guerreros" {
  test "poder de frodo" {
    assert.equals(560, frodo.poder())
  }
  
  test "poder de gimli" {
    assert.equals(138, gimli.poder())
  }
  
  test "poder de legolas" {
    legolas.raza().poderPocillo(2000)
    assert.equals(1000, legolas.poder())
  }
  
  test "poder de aragorn" {
    assert.equals(1084.8, aragorn.poder())
  }
}

describe "test de caminos" {
  test "frodo en el bosque de fangorn" {
    assert.that(caminoBosqueDeFangorn.puedeSerAtravesadoPor(frodo))
  }
  
  test "la energia de frodo disminuye por atravesae el bosque de fangorn" {
    caminoBosqueDeFangorn.atravesarCamino(frodo)
    assert.equals(50, frodo.nivelDeVida())
  }
  
  test "gimli atraviesa el camino de rohan" {
    assert.throwsExceptionWithMessage(
      "El guerrero no puede atravesar el camino ",
      { rohan.atravesarCamino(gimli) }
    )
  }
}

describe "test de Anillos" {
  test "Anillo de Fuego ataca al archienemigo" {
    const anilloDeFuego = new AnilloDeFuego()
    
    anilloDeFuego.invocar(gandalf, saruman, frodo)
    
    assert.equals(100, gandalf.nivelDeVida())
    assert.equals(40, saruman.nivelDeVida())
  }
  
  test "Anillo maldito le saca arma al duenio" {
    const anilloMaldito = new AnilloMaldito()
    
    anilloMaldito.invocar(gandalf, saruman, frodo)
    
    assert.equals(100, gandalf.nivelDeVida())
    assert.equals(1, gandalf.armas().size())
  }
  
  test "Anillo de aire da mas vida a duenio y amigo" {
    const anilloDeAire = new AnilloDeAire()
    
    anilloDeAire.invocar(frodo, saruman, gandalf)
    
    assert.equals(100, frodo.nivelDeVida())
    assert.equals(130, gandalf.nivelDeVida())
  }
  
  test "Anillo Unico da vida y despues saca mucho si tiene pocas armas" {
    anilloUnico.invocar(gollum, frodo, saruman)
    assert.equals(70, gollum.nivelDeVida())
  }
  
  test "Anillo Unico da vida y despues saca poco si tiene muchas armas" {
    anilloUnico.invocar(saruman, gandalf, gollum)
    assert.equals(80, saruman.nivelDeVida())
  }
}

describe "test penalidades" {
  test "Un guerrero puede perer algo de vida si no pasa por un camino" {
    gondor.castigos().add(new PierdeAlgoDeVida(cantidad = 20))
    assert.throwsExceptionWithMessage(
      "El guerrero no puede atravesar el camino ",
      { gondor.atravesarCamino(frodo) }
    )
    assert.equals(40, frodo.nivelDeVida())
  }
  
  test "Un guerrero puede perder toda la de vida si no pasa por un camino" {
    gondor.castigos([pierdeTodaLaVida])
    assert.throwsExceptionWithMessage(
      "El guerrero no puede atravesar el camino ",
      { gondor.atravesarCamino(frodo) }
    )
    assert.equals(0, frodo.nivelDeVida())
  }
  
  test "Un guerrero puede perder un arma, si no pasa por un camino" {
    gondor.castigos([quitarArmaMasPoderosa])
    assert.throwsExceptionWithMessage(
      "El guerrero no puede atravesar el camino ",
      { gondor.atravesarCamino(frodo) }
    )
    assert.equals(0, frodo.armas().size())
  }
  
  test "Un guerrero sin armas no pierde armas, pero es castigado si no pasa por un camino" {
    frodo.armas(#{})
    gondor.castigos([quitarArmaMasPoderosa])
    assert.throwsExceptionWithMessage(
      "El guerrero no puede atravesar el camino ",
      { gondor.atravesarCamino(frodo) }
    )
    assert.equals(0, frodo.armas().size())
  }
  
  test "Un guerrero puede perder vida y un arma, si no pasa por un camino" {
    gondor.castigos([quitarArmaMasPoderosa, pierdeTodaLaVida])
    assert.throwsExceptionWithMessage(
      "El guerrero no puede atravesar el camino ",
      { gondor.atravesarCamino(frodo) }
    )
    assert.equals(0, frodo.nivelDeVida())
    assert.equals(0, frodo.armas().size())
  }
}

describe "Test tacticas" {
  test "utiliza la tactica agil " {
    gandalf.enfrentarA(frodo)
    assert.equals(2600, gandalf.poder())
    assert.notThat(frodo.tieneVida())
  }
  
  test "utiliza la tactica agil pero el atacante no tiene vida" {
    gandalf.nivelDeVida(0)
    gandalf.enfrentarA(frodo)
    assert.equals(60, frodo.nivelDeVida())
    assert.notEquals(100, gandalf.nivelDeVida())
  }
  
  test "utiliza la tactica de resistencia " {
    gandalf.tactica(tacticaDeResistencia)
    gandalf.enfrentarA(frodo)
    assert.equals(44, gandalf.nivelDeVida())
  }
  
  test "utiliza la tactica de caruso " {
    const tacticaCaruso = new TacticaCaruso(umbralDeEnergia = 12)
    gandalf.tactica(tacticaCaruso)
    gandalf.enfrentarA(frodo)
    assert.that(gandalf.tieneVida())
    assert.notThat(frodo.tieneVida())
  }
  
  test "caruso sin poder el oponente" {
    const tacticaCaruso = new TacticaCaruso(umbralDeEnergia = 1000)
    gandalf.tactica(tacticaCaruso)
    gandalf.enfrentarA(frodo)
    assert.equals(90, gandalf.nivelDeVida())
    assert.that(frodo.tieneVida())
  }
  
  test "tactica la cuatro tres tres con el atacante con mucha vida" {
    gandalf.tactica(tacticaLaCuatroTresTres)
    gandalf.enfrentarA(frodo)
    assert.notThat(frodo.tieneVida())
    assert.equals(100, gandalf.nivelDeVida())
  }
  
  test "tactica cuatro tres tres con el atacante con poca vida" {
    gandalf.tactica(tacticaLaCuatroTresTres)
    gandalf.nivelDeVida(50)
    gandalf.enfrentarA(frodo)
    assert.notThat(frodo.tieneVida())
    assert.notEquals(100, gandalf.nivelDeVida())
  }
}